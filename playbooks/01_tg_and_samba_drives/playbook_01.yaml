- name: Comments in the PRs
  hosts: localhost
  vars:
    smb_mount_mode: ro
    smb_server: 0123456789.smbserver.net
    mount_folder_name: Trace_Storage
    path_to_shared_folder: "//{{ smb_server }}/{{ mount_folder_name }}"
    mount_path_folder: "/tmp/{{ mount_folder_name }}"
    storage_credentials_file: "{{ ansible_user_dir }}/.smbcredentials_storage_drive"
    tg_tasks: [{"taskId":43352, "name": "Release/e0e48ff6"}, {"taskId":43284, "name": "Master/0173a2ec"}, {"taskId":43319,"name":"Full/f01003c0"}]
    tg_list: [43352,43284,43319]
  tasks:
    # MOUNT SAMBA DRIVE
    - name: Ensure the mount directory exists
      become: true
      file:
        path: "{{ mount_path_folder }}"
        state: directory

    - name: Check if samba credentials file exists
      stat:
        path: "{{ storage_credentials_file }}"
      register: file_status

    - name: Slurp the credentials
      slurp:
        src: "{{ storage_credentials_file }}"
      register: credentials_file

    # actually, we don't need it
    - name: Create root copy of Samba credentials file
      become: true
      copy:
        content: |
          username = techuser
          password = TechUserPassword
          domain   = abc
        # "{{ credentials_file.content | b64decode | replace(' ', '') }}"
        dest: /root/.smbcredentials_storage_drive
        owner: root
        group: root
        mode: "0600"

    # We don't need this one too, it takes too long
    - name: Apt-cache update
      become: true
      command: apt-get update
      register: cache_ipdate
      ignore_errors: yes

    - name: Apt-cache search keyutils
      command: apt-cache search keyutils
      register: keyutils

    - name: Apt-cache cifs-utils
      command: apt-cache search cifs-utils
      register: cifsutils

    - name: Install dependencies for DFS handling
      become: true
      apt:
        name:
          - cifs-utils
          - keyutils
        state: present

    # Probably it would be better to remove 'ignore_errors'
    - name: Mount Samba share {{ path_to_shared_folder }} to {{ mount_path_folder }}
      become: true
      mount:
        state: mounted
        fstype: cifs
        opts: credentials=/root/.smbcredentials_storage_drive,gid=1000,uid=1000,{{ smb_mount_mode }}
        src: "{{ path_to_shared_folder }}"
        path: "{{ mount_path_folder }}"
      register: mount_result
      until: mount_result is not failed
      retries: 10
      delay: 10
      ignore_errors: true

    - name: Get taskId&name from TestGuide REST API
      uri:
        url: "https://tg5.tg-prod.net/api/v2/execution/task/filter?projectId=3&fields=taskId,name&authKey=< ADD AUTH KEY HERE >"
        method: POST
        body:
          names:
            - "Masterl*"
            - "Release*"
          creationDate: {"from": "{{ '%Y-%m-%dT%H:%M:%SZ' | strftime(ansible_date_time.epoch|int - 86400) }}", "to": "{{ ansible_date_time.iso8601 }}"}
        body_format: json
        return_content: yes
        validate_certs: false
      register: tg_tasks

    # Some debug outputs
    - debug: msg="{{ tg_tasks.json }}"
    - debug: msg="{{ item.taskId }}"
      with_items: "{{ tg_tasks.json }}"

    - name: test
      set_fact:
        rancher_env_hosts: "{{ rancher_env_hosts | default([]) + [item.taskId] }}"
      with_items: "{{ tg_tasks.json }}"

    - debug: msg="{{ rancher_env_hosts }}"

    - name: Get task ids
      set_fact:
        task_id: "{{ tg_tasks.json | map(attribute='taskId') | list }}"

    - debug: msg="{{ task_id }}"

    - name: Check to see if file exists
      stat:
        path: "/ADD TASK path HERE/{{ item }}"
      register: stat_results
      with_items: "{{ task_id }}"
      ignore_errors: True

    - set_fact:
        result_list: "{{ result_list | default([]) + [item.stat.path] }}"
        # result_list: "{{ item.stat.exists }}"
      with_items: "{{ stat_results.results }}"
      when: "{{ item.stat.exists and item.stat.isdir }}"

    - debug:
        msg: "{{ result_list }}"

    - name: Ensure the mount directory exists
      file:
        path: "/tmp/coredumps"
        state: directory

    - name: Copy coredumps to tmp dir
      copy:
        src: "{{ item }}"
        dest: "/tmp/coredumps"
        remote_src: yes
      with_items: "{{ result_list }}"

    - name: Ansible find files in subdirectory examples
      find:
        paths: "/tmp/coredumps"
        recurse: yes
      register: coredumps_tmp_paths

    - name: Set coredumps
      set_fact:
        coredumps: "{{ coredumps_tmp_paths.files | map(attribute='path') | list }}"

    - debug: msg="{{ coredumps }}"
